var v=Object.defineProperty;var k=(s,e,t)=>e in s?v(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t;var n=(s,e,t)=>k(s,typeof e!="symbol"?e+"":e,t);import"./modulepreload-polyfill-B5Qt9EMX.js";import{C as f,G as w,A as D}from"./HTMLText-BdaxDQUN.js";class E{constructor(e,t,i){n(this,"container");n(this,"segments",[]);n(this,"direction","right");n(this,"nextDirection","right");n(this,"gridSize");n(this,"gridWidth");n(this,"gridHeight");n(this,"graphics");this.gridSize=e,this.gridWidth=t,this.gridHeight=i,this.container=new f,this.graphics=new w,this.container.addChild(this.graphics),this.reset()}reset(){const e=Math.floor(this.gridWidth/2),t=Math.floor(this.gridHeight/2);this.segments=[{x:e,y:t},{x:e-1,y:t},{x:e-2,y:t}],this.direction="right",this.nextDirection="right",this.draw()}setDirection(e){this.direction==="up"&&e==="down"||this.direction==="down"&&e==="up"||this.direction==="left"&&e==="right"||this.direction==="right"&&e==="left"||(this.nextDirection=e)}move(){this.direction=this.nextDirection;const e=this.segments[0],t={x:e.x,y:e.y};switch(this.direction){case"up":t.y-=1;break;case"down":t.y+=1;break;case"left":t.x-=1;break;case"right":t.x+=1;break}return this.segments.unshift(t),this.segments.pop(),this.draw(),t}grow(){const e=this.segments[this.segments.length-1];this.segments.push({x:e.x,y:e.y})}checkCollision(e,t){return this.segments.some(i=>i.x===e&&i.y===t)}checkCollisionWithBody(e,t){return this.segments.slice(1).some(i=>i.x===e&&i.y===t)}draw(){this.graphics.clear(),this.segments.forEach((e,t)=>{const i=e.x*this.gridSize,d=e.y*this.gridSize;t===0?this.graphics.beginFill(3066993):this.graphics.beginFill(2600544),this.graphics.drawRoundedRect(i+1,d+1,this.gridSize-2,this.gridSize-2,3),this.graphics.endFill(),this.graphics.lineStyle(2,2267476,.8),this.graphics.drawRoundedRect(i+1,d+1,this.gridSize-2,this.gridSize-2,3),t===0&&this.drawEyes(i,d)})}drawEyes(e,t){let o,r,c,a;switch(this.direction){case"up":o=e+5,r=t+5,c=e+this.gridSize-5-3,a=t+5;break;case"down":o=e+5,r=t+this.gridSize-5-3,c=e+this.gridSize-5-3,a=t+this.gridSize-5-3;break;case"left":o=e+5,r=t+5,c=e+5,a=t+this.gridSize-5-3;break;case"right":o=e+this.gridSize-5-3,r=t+5,c=e+this.gridSize-5-3,a=t+this.gridSize-5-3;break}this.graphics.beginFill(0),this.graphics.drawCircle(o,r,3),this.graphics.drawCircle(c,a,3),this.graphics.endFill()}getHead(){return this.segments[0]}getLength(){return this.segments.length}}class C{constructor(e){n(this,"container");n(this,"x",0);n(this,"y",0);n(this,"graphics");n(this,"gridSize");n(this,"animationTime",0);this.gridSize=e,this.container=new f,this.graphics=new w,this.container.addChild(this.graphics)}setPosition(e,t){this.x=e,this.y=t,this.draw()}draw(){this.graphics.clear();const e=this.x*this.gridSize+this.gridSize/2,t=this.y*this.gridSize+this.gridSize/2,i=this.gridSize/2-2;this.graphics.beginFill(15158332),this.graphics.drawCircle(e,t,i),this.graphics.endFill(),this.graphics.lineStyle(2,12597547,.8),this.graphics.drawCircle(e,t,i),this.graphics.beginFill(16777215),this.graphics.drawCircle(e-i/3,t-i/3,i/4),this.graphics.endFill(),this.graphics.beginFill(2899536),this.graphics.drawEllipse(e+i/2,t-i/2,i/6,i/3),this.graphics.endFill()}update(e){this.animationTime+=e;const t=1+Math.sin(this.animationTime*.1)*.05;this.container.scale.set(t)}}const S={landscape:{width:600,height:400},portrait:{width:400,height:600}},l=40,y=()=>{const s=window.innerWidth,e=window.innerHeight-120,t=s>e,i=t?S.landscape:S.portrait,d=i.width/l,o=i.height/l,r=s/i.width,c=e/i.height,a=Math.min(r,c);return{gameWidth:i.width,gameHeight:i.height,gridWidth:Math.floor(d),gridHeight:Math.floor(o),scale:a,isLandscape:t}};class x{constructor(e){n(this,"app");n(this,"gameContainer");n(this,"snake");n(this,"food");n(this,"score",0);n(this,"highScore",0);n(this,"gameSpeed",150);n(this,"lastMoveTime",0);n(this,"isGameOver",!1);n(this,"isPaused",!1);n(this,"isWaitingToStart",!0);n(this,"removeInputHandler");n(this,"removeTouchHandler");n(this,"gameDimensions");this.app=e,this.gameContainer=new f,this.app.stage.addChild(this.gameContainer),this.gameDimensions=y(),this.highScore=parseInt(localStorage.getItem("snakeHighScore")||"0")}getGameDimensions(){return this.gameDimensions}async init(){this.createBackground(),this.snake=new E(l,this.gameDimensions.gridWidth,this.gameDimensions.gridHeight),this.gameContainer.addChild(this.snake.container),this.food=new C(l),this.gameContainer.addChild(this.food.container),this.spawnFood(),this.setupInput(),this.setupTouchControls(),this.setupStartScreen(),this.updateUI()}createBackground(){const e=new w;e.beginFill(3426654),e.drawRect(0,0,this.gameDimensions.gameWidth,this.gameDimensions.gameHeight),e.endFill(),e.lineStyle(1,2899536,1);for(let t=0;t<=this.gameDimensions.gridWidth;t++)e.moveTo(t*l,0),e.lineTo(t*l,this.gameDimensions.gameHeight);for(let t=0;t<=this.gameDimensions.gridHeight;t++)e.moveTo(0,t*l),e.lineTo(this.gameDimensions.gameWidth,t*l);this.gameContainer.addChild(e)}setupInput(){const e=t=>{if(!this.isGameOver)switch(t.key){case"ArrowUp":case"w":case"W":t.preventDefault(),this.snake.setDirection("up");break;case"ArrowDown":case"s":case"S":t.preventDefault(),this.snake.setDirection("down");break;case"ArrowLeft":case"a":case"A":t.preventDefault(),this.snake.setDirection("left");break;case"ArrowRight":case"d":case"D":t.preventDefault(),this.snake.setDirection("right");break;case" ":case"Escape":t.preventDefault(),this.togglePause();break}};document.addEventListener("keydown",e),this.removeInputHandler=()=>{document.removeEventListener("keydown",e)}}setupTouchControls(){let e=0,t=0,i=!1;const d=30,o=a=>{if(this.isGameOver)return;const g=a.touches[0];e=g.clientX,t=g.clientY,i=!0},r=a=>{i&&a.preventDefault()},c=a=>{if(!i)return;const g=a.changedTouches[0],u=g.clientX-e,p=g.clientY-t;Math.sqrt(u*u+p*p)>=d&&(Math.abs(u)>Math.abs(p)?u>0?this.snake.setDirection("right"):this.snake.setDirection("left"):p>0?this.snake.setDirection("down"):this.snake.setDirection("up")),i=!1};document.addEventListener("touchstart",o,{passive:!1}),document.addEventListener("touchmove",r,{passive:!1}),document.addEventListener("touchend",c,{passive:!1}),this.removeTouchHandler=()=>{document.removeEventListener("touchstart",o),document.removeEventListener("touchmove",r),document.removeEventListener("touchend",c)}}setupStartScreen(){const e=document.createElement("div");e.id="startScreen",e.style.cssText=`
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.8);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            color: white;
            text-align: center;
            z-index: 30;
            cursor: pointer;
        `,e.innerHTML=`
            <h2 style="margin: 0 0 20px 0; font-size: 24px;">üêç Snake</h2>
            <p style="margin: 0 0 30px 0; font-size: 16px; opacity: 0.8;">
                Click or tap to start<br>
                Use arrow keys or swipe to control
            </p>
            <div style="font-size: 14px; opacity: 0.6;">
                Desktop: Arrow keys or WASD<br>
                Mobile: Swipe to control
            </div>
        `;const t=document.getElementById("gameContainer");t&&t.appendChild(e);const i=()=>{this.isWaitingToStart=!1,this.lastMoveTime=Date.now(),e.style.display="none"};e.addEventListener("click",i),e.addEventListener("touchstart",i,{passive:!0})}update(e){if(this.isGameOver||this.isPaused||this.isWaitingToStart)return;const t=Date.now();t-this.lastMoveTime>this.gameSpeed&&(this.moveSnake(),this.lastMoveTime=t)}moveSnake(){const e=this.snake.move();if(e.x<0||e.x>=this.gameDimensions.gridWidth||e.y<0||e.y>=this.gameDimensions.gridHeight){this.gameOver();return}if(this.snake.checkCollisionWithBody(e.x,e.y)){this.gameOver();return}e.x===this.food.x&&e.y===this.food.y&&(this.snake.grow(),this.spawnFood(),this.score+=1,this.updateUI(),this.score%50===0&&this.gameSpeed>50&&(this.gameSpeed-=10))}spawnFood(){let e,t;do e=Math.floor(Math.random()*this.gameDimensions.gridWidth),t=Math.floor(Math.random()*this.gameDimensions.gridHeight);while(this.snake.checkCollision(e,t));this.food.setPosition(e,t)}gameOver(){this.isGameOver=!0,this.score>this.highScore&&(this.highScore=this.score,localStorage.setItem("snakeHighScore",this.highScore.toString()),this.updateUI()),this.showGameOver()}showGameOver(){const e=document.getElementById("gameOver"),t=document.getElementById("finalScore");e&&t&&(t.textContent=this.score.toString(),e.style.display="block")}togglePause(){this.isPaused=!this.isPaused,this.isPaused?this.showPauseMenu():this.hidePauseMenu()}showPauseMenu(){const e=document.getElementById("pauseMenu");e&&(e.style.display="block")}hidePauseMenu(){const e=document.getElementById("pauseMenu");e&&(e.style.display="none")}updateUI(){const e=document.getElementById("score"),t=document.getElementById("highScore");e&&(e.textContent=this.score.toString()),t&&(t.textContent=this.highScore.toString())}restart(){this.score=0,this.gameSpeed=150,this.isGameOver=!1,this.isPaused=!1,this.isWaitingToStart=!0,this.lastMoveTime=0,this.snake.reset(),this.spawnFood(),this.updateUI();const e=document.getElementById("gameOver");e&&(e.style.display="none"),this.hidePauseMenu();const t=document.getElementById("startScreen");t&&(t.style.display="flex")}resume(){this.isPaused=!1,this.hidePauseMenu()}destroy(){this.removeInputHandler&&this.removeInputHandler(),this.removeTouchHandler&&this.removeTouchHandler(),this.gameContainer&&this.gameContainer.parent&&this.gameContainer.parent.removeChild(this.gameContainer)}}let h=null,m=null;function H(){if(!m)return;const s=h==null?void 0:h.getGameDimensions();if(!s)return;const e=window.innerWidth,t=window.innerHeight-120,i=e/s.gameWidth,d=t/s.gameHeight,o=Math.min(i,d),r=m.view;r.style.width=`${s.gameWidth*o}px`,r.style.height=`${s.gameHeight*o}px`;const c=y(),a=s.isLandscape,g=c.isLandscape;a!==g&&console.log("Orientation changed but keeping current game orientation:",{current:a?"landscape":"portrait",new:g?"landscape":"portrait",note:"Game will use new orientation on restart"})}async function z(){const s=y();m=new D({width:s.gameWidth,height:s.gameHeight,backgroundColor:2899536,antialias:!0,resolution:window.devicePixelRatio||1});const e=document.getElementById("gameContainer");if(e){const t=m.view;t.style.width=`${s.gameWidth*s.scale}px`,t.style.height=`${s.gameHeight*s.scale}px`,t.style.maxWidth="100%",t.style.maxHeight="100%",t.style.objectFit="contain",e.appendChild(t),console.log("Snake dimensions:",{baseWidth:s.gameWidth,baseHeight:s.gameHeight,scale:s.scale,scaledWidth:s.gameWidth*s.scale,scaledHeight:s.gameHeight*s.scale,canvasWidth:t.width,canvasHeight:t.height,styleWidth:t.style.width,styleHeight:t.style.height})}h=new x(m),await h.init(),m.ticker.add(b),window.addEventListener("resize",H)}function b(s){h&&h.update(s)}window.restartGame=()=>{h&&h.restart()};window.returnToMainMenu=()=>{window.location.href="/arcade/"};window.resumeGame=()=>{h&&h.resume()};window.togglePause=()=>{h&&h.togglePause()};window.addEventListener("load",z);
//# sourceMappingURL=snake-CtXS91I5.js.map
