{"version":3,"file":"memory-BA_XHPI-.js","sources":["../../src/games/memory/card.ts","../../src/games/memory/game.ts"],"sourcesContent":["import { Container, Graphics, Text, TextStyle } from 'pixi.js';\r\n\r\nexport class Card {\r\n    public container: Container;\r\n    public emoji: string;\r\n    public id: number;\r\n    public isFlipped: boolean = false;\r\n    public isMatched: boolean = false;\r\n    \r\n    private background!: Graphics;\r\n    private emojiText!: Text;\r\n    private width: number;\r\n    private height: number;\r\n    private isAnimating: boolean = false;\r\n\r\n    constructor(width: number, height: number, emoji: string, id: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.emoji = emoji;\r\n        this.id = id;\r\n        \r\n        this.container = new Container();\r\n        this.container.eventMode = 'static';\r\n        this.container.cursor = 'pointer';\r\n        \r\n        // Set pivot to center for proper hover scaling\r\n        this.container.pivot.set(width / 2, height / 2);\r\n        \r\n        this.createCard();\r\n        this.setupInteraction();\r\n    }\r\n\r\n    private createCard(): void {\r\n        // Create card background (face down)\r\n        this.background = new Graphics();\r\n        this.background.beginFill(0x3498db);\r\n        this.background.lineStyle(3, 0x2980b9);\r\n        this.background.drawRoundedRect(0, 0, this.width, this.height, 10);\r\n        this.background.endFill();\r\n        \r\n        // Add inner highlight\r\n        this.background.beginFill(0x5dade2);\r\n        this.background.drawRoundedRect(3, 3, this.width - 6, this.height - 6, 8);\r\n        this.background.endFill();\r\n        \r\n        this.container.addChild(this.background);\r\n        \r\n        // Create emoji text (initially hidden)\r\n        const style = new TextStyle({\r\n            fontFamily: 'Arial',\r\n            fontSize: 36,\r\n            fill: 0x2c3e50,\r\n            align: 'center'\r\n        });\r\n        \r\n        this.emojiText = new Text(this.emoji, style);\r\n        this.emojiText.anchor.set(0.5);\r\n        this.emojiText.position.set(this.width / 2, this.height / 2);\r\n        this.emojiText.alpha = 0; // Start hidden\r\n        this.container.addChild(this.emojiText);\r\n    }\r\n\r\n    private setupInteraction(): void {\r\n        this.container.on('pointerdown', () => {\r\n            if (!this.isAnimating && !this.isMatched) {\r\n                window.onCardClick(this);\r\n            }\r\n        });\r\n        \r\n        // Add hover effects\r\n        this.container.on('pointerover', () => {\r\n            if (!this.isFlipped && !this.isMatched && !this.isAnimating) {\r\n                this.container.scale.set(1.05);\r\n            }\r\n        });\r\n        \r\n        this.container.on('pointerout', () => {\r\n            if (!this.isFlipped && !this.isMatched && !this.isAnimating) {\r\n                this.container.scale.set(1.0);\r\n            }\r\n        });\r\n    }\r\n\r\n    public setPosition(x: number, y: number): void {\r\n        // Adjust position to account for center pivot\r\n        this.container.position.set(x + this.width / 2, y + this.height / 2);\r\n    }\r\n\r\n    public flip(): void {\r\n        if (this.isAnimating) return;\r\n        \r\n        this.isAnimating = true;\r\n        this.isFlipped = !this.isFlipped;\r\n        \r\n        if (this.isFlipped) {\r\n            // Flip to show emoji\r\n            this.showEmoji();\r\n        } else {\r\n            // Flip to hide emoji\r\n            this.hideEmoji();\r\n        }\r\n    }\r\n\r\n    private showEmoji(): void {\r\n        // Animate the flip\r\n        this.container.scale.x = 0;\r\n        this.emojiText.alpha = 1;\r\n        \r\n        // Change background to white\r\n        this.background.clear();\r\n        this.background.beginFill(0xffffff);\r\n        this.background.lineStyle(3, 0xe0e0e0);\r\n        this.background.drawRoundedRect(0, 0, this.width, this.height, 10);\r\n        this.background.endFill();\r\n        \r\n        // Animate scale back to normal\r\n        const animate = () => {\r\n            this.container.scale.x += 0.2;\r\n            if (this.container.scale.x >= 1) {\r\n                this.container.scale.set(1.0, 1.0); // Ensure both x and y are set to 1.0\r\n                this.isAnimating = false;\r\n            } else {\r\n                requestAnimationFrame(animate);\r\n            }\r\n        };\r\n        animate();\r\n    }\r\n\r\n    private hideEmoji(): void {\r\n        // Animate the flip\r\n        this.container.scale.x = 0;\r\n        this.emojiText.alpha = 0;\r\n        \r\n        // Change background back to blue\r\n        this.background.clear();\r\n        this.background.beginFill(0x3498db);\r\n        this.background.lineStyle(3, 0x2980b9);\r\n        this.background.drawRoundedRect(0, 0, this.width, this.height, 10);\r\n        this.background.endFill();\r\n        \r\n        // Add inner highlight\r\n        this.background.beginFill(0x5dade2);\r\n        this.background.drawRoundedRect(3, 3, this.width - 6, this.height - 6, 8);\r\n        this.background.endFill();\r\n        \r\n        // Animate scale back to normal\r\n        const animate = () => {\r\n            this.container.scale.x += 0.2;\r\n            if (this.container.scale.x >= 1) {\r\n                this.container.scale.set(1.0, 1.0); // Ensure both x and y are set to 1.0\r\n                this.isAnimating = false;\r\n            } else {\r\n                requestAnimationFrame(animate);\r\n            }\r\n        };\r\n        animate();\r\n    }\r\n\r\n    public setMatched(): void {\r\n        this.isMatched = true;\r\n        this.isFlipped = true;\r\n        \r\n        // Animate fade out\r\n        const fadeOut = () => {\r\n            this.container.alpha -= 0.05;\r\n            if (this.container.alpha > 0) {\r\n                requestAnimationFrame(fadeOut);\r\n            } else {\r\n                this.container.alpha = 0;\r\n            }\r\n        };\r\n        fadeOut();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.isFlipped = false;\r\n        this.isMatched = false;\r\n        this.isAnimating = false;\r\n        this.container.alpha = 1;\r\n        this.container.scale.set(1.0);\r\n        this.emojiText.alpha = 0;\r\n        \r\n        // Reset background to face down\r\n        this.background.clear();\r\n        this.background.beginFill(0x3498db);\r\n        this.background.lineStyle(3, 0x2980b9);\r\n        this.background.drawRoundedRect(0, 0, this.width, this.height, 10);\r\n        this.background.endFill();\r\n        \r\n        // Add inner highlight\r\n        this.background.beginFill(0x5dade2);\r\n        this.background.drawRoundedRect(3, 3, this.width - 6, this.height - 6, 8);\r\n        this.background.endFill();\r\n    }\r\n} ","import { Application, Container, Graphics, Text, TextStyle } from 'pixi.js';\r\nimport { Card } from './card';\r\n\r\n// Game constants - fixed base dimensions\r\nconst BASE_GAME_WIDTH = 800;\r\nconst BASE_GAME_HEIGHT = 600;\r\nconst GRID_ROWS = 4;\r\nconst GRID_COLS = 6;\r\nconst CARD_ASPECT_RATIO = 0.8; // Width to height ratio (4:5)\r\nconst CARD_SPACING = 10; // Fixed spacing between cards\r\n\r\n// Calculate optimal card size to fit all cards in the canvas\r\nconst calculateCardSize = () => {\r\n    // Use almost all available space with minimal margin\r\n    const margin = 20; // Very minimal margin\r\n    const availableWidth = BASE_GAME_WIDTH - margin * 2;\r\n    const availableHeight = BASE_GAME_HEIGHT - margin * 2;\r\n    \r\n    // Calculate card size based on width constraint\r\n    const cardWidthFromWidth = (availableWidth - (GRID_COLS - 1) * CARD_SPACING) / GRID_COLS;\r\n    const cardHeightFromWidth = cardWidthFromWidth / CARD_ASPECT_RATIO;\r\n    \r\n    // Calculate card size based on height constraint\r\n    const cardHeightFromHeight = (availableHeight - (GRID_ROWS - 1) * CARD_SPACING) / GRID_ROWS;\r\n    const cardWidthFromHeight = cardHeightFromHeight * CARD_ASPECT_RATIO;\r\n    \r\n    // Use the smaller of the two to ensure everything fits\r\n    const cardWidth = Math.min(cardWidthFromWidth, cardWidthFromHeight);\r\n    const cardHeight = cardWidth / CARD_ASPECT_RATIO;\r\n    \r\n    return {\r\n        cardWidth: Math.floor(cardWidth),\r\n        cardHeight: Math.floor(cardHeight),\r\n        cardPadding: CARD_SPACING\r\n    };\r\n};\r\n\r\n// Get card dimensions\r\nconst CARD_DIMENSIONS = calculateCardSize();\r\n\r\n// Responsive scaling function\r\nconst getGameDimensions = () => {\r\n    const windowWidth = window.innerWidth;\r\n    const windowHeight = window.innerHeight - 120; // Account for top bar and margins\r\n    \r\n    // Calculate scale to fit within available space while maintaining aspect ratio\r\n    const scaleX = windowWidth / BASE_GAME_WIDTH;\r\n    const scaleY = windowHeight / BASE_GAME_HEIGHT;\r\n    const scale = Math.min(scaleX, scaleY);\r\n    \r\n    return {\r\n        gameWidth: BASE_GAME_WIDTH,\r\n        gameHeight: BASE_GAME_HEIGHT,\r\n        scale\r\n    };\r\n};\r\n\r\n// Emoji pairs for the cards\r\nconst ALL_EMOJIS = [\r\n    // Animals\r\n    '🐶', '🐱', '🐭', '🐹', '🐰', '🦊', '🐻', '🐼', '🐨', '🐯', '🦁', '🐮',\r\n    // Fruits\r\n    '🍎', '🍌', '🍇', '🍓', '🍊', '🍒', '🍑', '🍍', '🍐', '🍋',\r\n    // Vegetables\r\n    '🥕', '🥬', '🥦', '🌽', '🥔', '🍅', \r\n    // Emojis\r\n    '😂', '🤠', '🤡', \r\n    // Sports\r\n    '🏀', '🏈', '⚽', '🎾', '🏓',\r\n    // Music\r\n    '🎵', '🎤', '🎹', '🎺', '🎻',\r\n    // Misc\r\n    '🔥', '⚡', '💡'\r\n];\r\n\r\n// Calculate how many pairs we need for the grid\r\nconst PAIRS_NEEDED = (GRID_ROWS * GRID_COLS) / 2;\r\n\r\n// Randomly select emojis for this game\r\nfunction getRandomEmojis(): string[] {\r\n    const shuffled = [...ALL_EMOJIS].sort(() => Math.random() - 0.5);\r\n    return shuffled.slice(0, PAIRS_NEEDED);\r\n}\r\n\r\nconst EMOJI_PAIRS = getRandomEmojis();\r\n\r\nexport class MemoryGame {\r\n    private app: Application;\r\n    private gameContainer: Container;\r\n    private cards: Card[] = [];\r\n    private flippedCards: Card[] = [];\r\n    private matchedPairs: number = 0;\r\n    private moves: number = 0;\r\n    private startTime: number = 0;\r\n    private gameTime: number = 0;\r\n    private isGameOver: boolean = false;\r\n    private isPaused: boolean = false;\r\n    private canFlip: boolean = true;\r\n    private removeInputHandler?: () => void;\r\n    private gameStarted: boolean = false;\r\n    private flipTimeout?: ReturnType<typeof setTimeout>;\r\n\r\n    constructor(app: Application) {\r\n        this.app = app;\r\n        this.gameContainer = new Container();\r\n        this.app.stage.addChild(this.gameContainer);\r\n    }\r\n\r\n    async init(): Promise<void> {\r\n        // Create game background\r\n        this.createBackground();\r\n        \r\n        // Create and shuffle cards\r\n        this.createCards();\r\n        this.shuffleCards();\r\n        \r\n        // Position cards in grid\r\n        this.positionCards();\r\n        \r\n        // Set up input handling\r\n        this.setupInput();\r\n        \r\n        // Initialize UI\r\n        this.updateUI();\r\n        \r\n        // Don't start timer yet - wait for first card click\r\n    }\r\n\r\n    private createBackground(): void {\r\n        const background = new Graphics();\r\n        background.beginFill(0x34495e);\r\n        background.drawRect(0, 0, BASE_GAME_WIDTH, BASE_GAME_HEIGHT);\r\n        background.endFill();\r\n        \r\n        this.gameContainer.addChild(background);\r\n    }\r\n\r\n    private createCards(): void {\r\n        // Create pairs of cards\r\n        for (let i = 0; i < EMOJI_PAIRS.length; i++) {\r\n            const emoji = EMOJI_PAIRS[i];\r\n            \r\n            // Create two cards with the same emoji\r\n            const card1 = new Card(CARD_DIMENSIONS.cardWidth, CARD_DIMENSIONS.cardHeight, emoji, i * 2);\r\n            const card2 = new Card(CARD_DIMENSIONS.cardWidth, CARD_DIMENSIONS.cardHeight, emoji, i * 2 + 1);\r\n            \r\n            this.cards.push(card1, card2);\r\n            this.gameContainer.addChild(card1.container);\r\n            this.gameContainer.addChild(card2.container);\r\n        }\r\n    }\r\n\r\n    private shuffleCards(): void {\r\n        // Fisher-Yates shuffle\r\n        for (let i = this.cards.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [this.cards[i], this.cards[j]] = [this.cards[j], this.cards[i]];\r\n        }\r\n    }\r\n\r\n    private positionCards(): void {\r\n        const { gameWidth, gameHeight, scale } = getGameDimensions();\r\n        const startX = (gameWidth - (GRID_COLS * (CARD_DIMENSIONS.cardWidth + CARD_DIMENSIONS.cardPadding) - CARD_DIMENSIONS.cardPadding)) / 2;\r\n        const startY = (gameHeight - (GRID_ROWS * (CARD_DIMENSIONS.cardHeight + CARD_DIMENSIONS.cardPadding) - CARD_DIMENSIONS.cardPadding)) / 2;\r\n        \r\n        for (let i = 0; i < this.cards.length; i++) {\r\n            const row = Math.floor(i / GRID_COLS);\r\n            const col = i % GRID_COLS;\r\n            \r\n            const x = startX + col * (CARD_DIMENSIONS.cardWidth + CARD_DIMENSIONS.cardPadding);\r\n            const y = startY + row * (CARD_DIMENSIONS.cardHeight + CARD_DIMENSIONS.cardPadding);\r\n            \r\n            this.cards[i].setPosition(x, y);\r\n        }\r\n    }\r\n\r\n    private setupInput(): void {\r\n        const handleKeydown = (event: KeyboardEvent) => {\r\n            if (this.isGameOver) return;\r\n            \r\n            switch (event.key) {\r\n                case 'Escape':\r\n                    event.preventDefault();\r\n                    this.togglePause();\r\n                    break;\r\n            }\r\n        };\r\n\r\n        document.addEventListener('keydown', handleKeydown);\r\n        \r\n        // Store the handler so we can remove it later\r\n        this.removeInputHandler = () => {\r\n            document.removeEventListener('keydown', handleKeydown);\r\n        };\r\n    }\r\n\r\n    update(delta: number): void {\r\n        if (this.isPaused) return;\r\n        \r\n        // Update game time only if game has started\r\n        if (this.gameStarted && !this.isGameOver) {\r\n            this.gameTime = Math.floor((Date.now() - this.startTime) / 1000);\r\n            this.updateUI();\r\n        }\r\n    }\r\n\r\n    onCardClick(card: Card): void {\r\n        \r\n        if (this.isPaused || this.isGameOver) return;\r\n        if (card.isFlipped || card.isMatched) return;\r\n\r\n        // Start the timer on first card click\r\n        if (!this.gameStarted) {\r\n            this.gameStarted = true;\r\n            this.startTime = Date.now();\r\n        }\r\n\r\n        // If we already have 2 cards flipped and waiting, flip them back immediately\r\n        if (this.flippedCards.length === 2) {\r\n\r\n            // Clear the existing timeout\r\n            if (this.flipTimeout) {\r\n                clearTimeout(this.flipTimeout);\r\n                this.flipTimeout = undefined;\r\n            }\r\n            \r\n            this.flippedCards[0].flip();\r\n            this.flippedCards[1].flip();\r\n            this.flippedCards = [];\r\n            this.canFlip = true;\r\n            return;\r\n        }\r\n\r\n        // Flip the card\r\n        card.flip();\r\n        this.flippedCards.push(card);\r\n\r\n        // Check if we have two cards flipped\r\n        if (this.flippedCards.length === 2) {\r\n            this.moves++;\r\n            this.canFlip = false;\r\n            \r\n            // Check for match\r\n            if (this.flippedCards[0].emoji === this.flippedCards[1].emoji) {\r\n                // Match found\r\n                this.flippedCards[0].setMatched();\r\n                this.flippedCards[1].setMatched();\r\n                this.matchedPairs++;\r\n                \r\n                // Check if game is complete\r\n                if (this.matchedPairs === EMOJI_PAIRS.length) {\r\n                    this.gameOver();\r\n                }\r\n                \r\n                this.flippedCards = [];\r\n                this.canFlip = true;\r\n            } else {\r\n                // No match, flip back after delay\r\n                this.flipTimeout = setTimeout(() => {\r\n                    this.flippedCards[0].flip();\r\n                    this.flippedCards[1].flip();\r\n                    this.flippedCards = [];\r\n                    this.canFlip = true;\r\n                    this.flipTimeout = undefined;\r\n                }, 1000);\r\n            }\r\n            \r\n            this.updateUI();\r\n        }\r\n    }\r\n\r\n    private gameOver(): void {\r\n        this.isGameOver = true;\r\n        this.showGameOver();\r\n    }\r\n\r\n    private showGameOver(): void {\r\n        const gameOverElement = document.getElementById('gameOver');\r\n        const finalMovesElement = document.getElementById('finalMoves');\r\n        const finalTimeElement = document.getElementById('finalTime');\r\n        \r\n        if (gameOverElement && finalMovesElement && finalTimeElement) {\r\n            finalMovesElement.textContent = this.moves.toString();\r\n            finalTimeElement.textContent = this.formatTime(this.gameTime);\r\n            gameOverElement.style.display = 'block';\r\n        }\r\n    }\r\n\r\n    togglePause(): void {\r\n        this.isPaused = !this.isPaused;\r\n        \r\n        if (this.isPaused) {\r\n            this.showPauseMenu();\r\n        } else {\r\n            this.hidePauseMenu();\r\n        }\r\n    }\r\n\r\n    private showPauseMenu(): void {\r\n        const pauseMenuElement = document.getElementById('pauseMenu');\r\n        if (pauseMenuElement) {\r\n            pauseMenuElement.style.display = 'block';\r\n        }\r\n    }\r\n\r\n    private hidePauseMenu(): void {\r\n        const pauseMenuElement = document.getElementById('pauseMenu');\r\n        if (pauseMenuElement) {\r\n            pauseMenuElement.style.display = 'none';\r\n        }\r\n    }\r\n\r\n    private updateUI(): void {\r\n        const movesElement = document.getElementById('moves');\r\n        const pairsElement = document.getElementById('pairs');\r\n        const timeElement = document.getElementById('time');\r\n        \r\n        if (movesElement) movesElement.textContent = this.moves.toString();\r\n        if (pairsElement) pairsElement.textContent = this.matchedPairs.toString();\r\n        if (timeElement) timeElement.textContent = this.formatTime(this.gameTime);\r\n    }\r\n\r\n    private formatTime(seconds: number): string {\r\n        const minutes = Math.floor(seconds / 60);\r\n        const remainingSeconds = seconds % 60;\r\n        return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;\r\n    }\r\n\r\n    restart(): void {\r\n        this.matchedPairs = 0;\r\n        this.moves = 0;\r\n        this.gameTime = 0;\r\n        this.isGameOver = false;\r\n        this.isPaused = false;\r\n        this.canFlip = true;\r\n        this.gameStarted = false;\r\n        this.flippedCards = [];\r\n        \r\n        // Clear any pending timeout\r\n        if (this.flipTimeout) {\r\n            clearTimeout(this.flipTimeout);\r\n            this.flipTimeout = undefined;\r\n        }\r\n        \r\n        // Reset all cards\r\n        this.cards.forEach(card => {\r\n            card.reset();\r\n        });\r\n        \r\n        // Shuffle cards again\r\n        this.shuffleCards();\r\n        this.positionCards();\r\n        \r\n        // Don't start timer yet - wait for first card click\r\n        this.startTime = 0;\r\n        \r\n        this.updateUI();\r\n        \r\n        // Hide modals\r\n        const gameOverElement = document.getElementById('gameOver');\r\n        if (gameOverElement) {\r\n            gameOverElement.style.display = 'none';\r\n        }\r\n        this.hidePauseMenu();\r\n    }\r\n\r\n    resume(): void {\r\n        this.isPaused = false;\r\n        this.hidePauseMenu();\r\n    }\r\n\r\n    destroy(): void {\r\n        if (this.removeInputHandler) {\r\n            this.removeInputHandler();\r\n        }\r\n        if (this.flipTimeout) {\r\n            clearTimeout(this.flipTimeout);\r\n        }\r\n        if (this.gameContainer && this.gameContainer.parent) {\r\n            this.gameContainer.parent.removeChild(this.gameContainer);\r\n        }\r\n    }\r\n}\r\n\r\n// Global game instance\r\nlet game: MemoryGame | null = null;\r\nlet app: Application | null = null;\r\n\r\n// Function to update canvas scaling on resize\r\nfunction updateCanvasScaling() {\r\n    if (!app) return;\r\n    \r\n    const dimensions = getGameDimensions();\r\n    const canvas = app.view as HTMLCanvasElement;\r\n    \r\n    // Update canvas CSS dimensions\r\n    canvas.style.width = `${BASE_GAME_WIDTH * dimensions.scale}px`;\r\n    canvas.style.height = `${BASE_GAME_HEIGHT * dimensions.scale}px`;\r\n    \r\n    console.log('Memory canvas resized:', {\r\n        scale: dimensions.scale,\r\n        scaledWidth: BASE_GAME_WIDTH * dimensions.scale,\r\n        scaledHeight: BASE_GAME_HEIGHT * dimensions.scale,\r\n        styleWidth: canvas.style.width,\r\n        styleHeight: canvas.style.height\r\n    });\r\n}\r\n\r\n// Initialize the game when the page loads\r\nasync function initGame() {\r\n    // Get dimensions and scale\r\n    const dimensions = getGameDimensions();\r\n    \r\n    // Create PIXI application with base dimensions\r\n    app = new Application({\r\n        width: BASE_GAME_WIDTH,\r\n        height: BASE_GAME_HEIGHT,\r\n        backgroundColor: 0x2c3e50,\r\n        antialias: true,\r\n        resolution: window.devicePixelRatio || 1,\r\n    });\r\n\r\n    // Add canvas to game container with proper scaling\r\n    const gameContainer = document.getElementById('gameContainer');\r\n    if (gameContainer) {\r\n        const canvas = app.view as HTMLCanvasElement;\r\n        \r\n        // Apply scaling through CSS transform\r\n        canvas.style.width = `${BASE_GAME_WIDTH * dimensions.scale}px`;\r\n        canvas.style.height = `${BASE_GAME_HEIGHT * dimensions.scale}px`;\r\n        canvas.style.maxWidth = '100%';\r\n        canvas.style.maxHeight = '100%';\r\n        canvas.style.objectFit = 'contain';\r\n        \r\n        gameContainer.appendChild(canvas);\r\n        \r\n        console.log('Memory dimensions:', {\r\n            baseWidth: BASE_GAME_WIDTH,\r\n            baseHeight: BASE_GAME_HEIGHT,\r\n            scale: dimensions.scale,\r\n            scaledWidth: BASE_GAME_WIDTH * dimensions.scale,\r\n            scaledHeight: BASE_GAME_HEIGHT * dimensions.scale,\r\n            canvasWidth: canvas.width,\r\n            canvasHeight: canvas.height,\r\n            styleWidth: canvas.style.width,\r\n            styleHeight: canvas.style.height\r\n        });\r\n    }\r\n\r\n    // Create and initialize game\r\n    game = new MemoryGame(app);\r\n    await game.init();\r\n\r\n    // Set up game loop\r\n    app.ticker.add(gameLoop);\r\n    \r\n    // Add resize handler\r\n    window.addEventListener('resize', updateCanvasScaling);\r\n}\r\n\r\nfunction gameLoop(delta: number) {\r\n    if (game) {\r\n        game.update(delta);\r\n    }\r\n}\r\n\r\n// Global functions for game control\r\ndeclare global {\r\n    interface Window {\r\n        restartGame: () => void;\r\n        returnToMainMenu: () => void;\r\n        resumeGame: () => void;\r\n        togglePause: () => void;\r\n        onCardClick: (card: any) => void;\r\n    }\r\n}\r\n\r\nwindow.restartGame = () => {\r\n    if (game) {\r\n        game.restart();\r\n    }\r\n};\r\n\r\nwindow.returnToMainMenu = () => {\r\n    window.location.href = '/arcade/';\r\n};\r\n\r\nwindow.resumeGame = () => {\r\n    if (game) {\r\n        game.resume();\r\n    }\r\n};\r\n\r\nwindow.togglePause = () => {\r\n    if (game) {\r\n        game.togglePause();\r\n    }\r\n};\r\n\r\nwindow.onCardClick = (card: any) => {\r\n    if (game) {\r\n        game.onCardClick(card);\r\n    }\r\n};\r\n\r\n// Initialize when page loads\r\nwindow.addEventListener('load', initGame); "],"names":["Card","width","height","emoji","id","__publicField","Container","Graphics","style","TextStyle","Text","x","y","animate","fadeOut","BASE_GAME_WIDTH","BASE_GAME_HEIGHT","GRID_ROWS","GRID_COLS","CARD_ASPECT_RATIO","CARD_SPACING","calculateCardSize","availableWidth","availableHeight","cardWidthFromWidth","cardWidthFromHeight","cardWidth","cardHeight","CARD_DIMENSIONS","getGameDimensions","windowWidth","windowHeight","scaleX","scaleY","scale","ALL_EMOJIS","PAIRS_NEEDED","getRandomEmojis","EMOJI_PAIRS","MemoryGame","app","background","i","card1","card2","j","gameWidth","gameHeight","startX","startY","row","col","handleKeydown","event","delta","card","gameOverElement","finalMovesElement","finalTimeElement","pauseMenuElement","movesElement","pairsElement","timeElement","seconds","minutes","remainingSeconds","game","updateCanvasScaling","dimensions","canvas","initGame","Application","gameContainer","gameLoop"],"mappings":"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"}