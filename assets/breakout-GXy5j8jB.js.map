{"version":3,"file":"breakout-GXy5j8jB.js","sources":["../../src/games/breakout/paddle.ts","../../src/games/breakout/ball.ts","../../src/games/breakout/brick.ts","../../src/games/breakout/powerup.ts","../../src/games/breakout/particle.ts","../../src/games/breakout/game.ts"],"sourcesContent":["import { Container, Graphics } from 'pixi.js';\r\n\r\nexport class Paddle {\r\n    public container: Container;\r\n    public x: number = 0;\r\n    public y: number = 0;\r\n    private width: number;\r\n    private height: number;\r\n    private graphics!: Graphics;\r\n\r\n    constructor(width: number, height: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.container = new Container();\r\n        \r\n        this.updateGraphics();\r\n    }\r\n\r\n    private updateGraphics(): void {\r\n        // Clear existing graphics\r\n        if (this.graphics) {\r\n            this.container.removeChild(this.graphics);\r\n        }\r\n        \r\n        // Create paddle graphics\r\n        this.graphics = new Graphics();\r\n        this.graphics.beginFill(0x4ecdc4);\r\n        this.graphics.drawRoundedRect(0, 0, this.width, this.height, 5);\r\n        this.graphics.endFill();\r\n        \r\n        // Add border\r\n        this.graphics.lineStyle(2, 0xffffff, 0.8);\r\n        this.graphics.drawRoundedRect(0, 0, this.width, this.height, 5);\r\n        \r\n        this.container.addChild(this.graphics);\r\n    }\r\n\r\n    setPosition(x: number, y: number): void {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.container.x = x;\r\n        this.container.y = y;\r\n    }\r\n\r\n    resize(newWidth: number): void {\r\n        this.width = newWidth;\r\n        this.updateGraphics();\r\n    }\r\n\r\n    getBounds() {\r\n        return {\r\n            left: this.x,\r\n            right: this.x + this.width,\r\n            top: this.y,\r\n            bottom: this.y + this.height\r\n        };\r\n    }\r\n} ","import { Container, Graphics } from 'pixi.js';\r\nimport { Paddle } from './paddle';\r\nimport { Brick } from './brick';\r\n\r\nexport class Ball {\r\n    public container: Container;\r\n    public x: number = 0;\r\n    public y: number = 0;\r\n    public radius: number;\r\n    public velocityX: number = 0;\r\n    public velocityY: number = 0;\r\n    private graphics!: Graphics;\r\n\r\n    constructor(radius: number) {\r\n        this.radius = radius;\r\n        this.container = new Container();\r\n        \r\n        // Create ball graphics\r\n        this.graphics = new Graphics();\r\n        this.graphics.beginFill(0xffffff);\r\n        this.graphics.drawCircle(0, 0, radius);\r\n        this.graphics.endFill();\r\n        \r\n        // Add border\r\n        this.graphics.lineStyle(2, 0x2c3e50, 0.8);\r\n        this.graphics.drawCircle(0, 0, radius);\r\n        \r\n        this.container.addChild(this.graphics);\r\n    }\r\n\r\n    setPosition(x: number, y: number): void {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.container.x = x;\r\n        this.container.y = y;\r\n    }\r\n\r\n    setVelocity(x: number, y: number): void {\r\n        this.velocityX = x;\r\n        this.velocityY = y;\r\n    }\r\n\r\n    setVelocityAndAngle(speed: number, angle: number): void {\r\n        this.velocityX = speed * Math.sin(angle);\r\n        this.velocityY = -speed * Math.cos(angle);\r\n    }\r\n\r\n    setAngle(angle: number): void {\r\n        const speed = Math.sqrt(this.velocityX * this.velocityX + this.velocityY * this.velocityY);\r\n        this.velocityX = speed * Math.sin(angle);\r\n        this.velocityY = -speed * Math.cos(angle);\r\n    }\r\n\r\n    reverseX(): void {\r\n        this.velocityX = -this.velocityX;\r\n    }\r\n\r\n    reverseY(): void {\r\n        this.velocityY = -this.velocityY;\r\n    }\r\n\r\n    update(): void {\r\n        this.x += this.velocityX;\r\n        this.y += this.velocityY;\r\n        this.container.x = this.x;\r\n        this.container.y = this.y;\r\n    }\r\n\r\n    getBounds() {\r\n        return {\r\n            left: this.x - this.radius,\r\n            right: this.x + this.radius,\r\n            top: this.y - this.radius,\r\n            bottom: this.y + this.radius\r\n        };\r\n    }\r\n\r\n    checkCollisionWithPaddle(paddle: Paddle): boolean {\r\n        const ballBounds = this.getBounds();\r\n        const paddleBounds = paddle.getBounds();\r\n        \r\n        return ballBounds.left < paddleBounds.right &&\r\n               ballBounds.right > paddleBounds.left &&\r\n               ballBounds.top < paddleBounds.bottom &&\r\n               ballBounds.bottom > paddleBounds.top;\r\n    }\r\n\r\n    checkCollisionWithBrick(brick: Brick): boolean {\r\n        const ballBounds = this.getBounds();\r\n        const brickBounds = brick.getBounds();\r\n        \r\n        return ballBounds.left < brickBounds.right &&\r\n               ballBounds.right > brickBounds.left &&\r\n               ballBounds.top < brickBounds.bottom &&\r\n               ballBounds.bottom > brickBounds.top;\r\n    }\r\n} ","import { Container, Graphics } from 'pixi.js';\r\n\r\nexport class Brick {\r\n    public container: Container;\r\n    public x: number = 0;\r\n    public y: number = 0;\r\n    private width: number;\r\n    private height: number;\r\n    private maxHealth: number;\r\n    private health: number;\r\n    private graphics!: Graphics;\r\n\r\n    constructor(width: number, height: number, maxHealth: number) {\r\n        this.width = width;\r\n        this.height = height;\r\n        this.maxHealth = maxHealth;\r\n        this.health = maxHealth;\r\n        this.container = new Container();\r\n        \r\n        this.updateGraphics();\r\n    }\r\n\r\n    private updateGraphics(): void {\r\n        // Clear existing graphics\r\n        if (this.graphics) {\r\n            this.container.removeChild(this.graphics);\r\n        }\r\n        \r\n        // Create new graphics with current health color\r\n        this.graphics = new Graphics();\r\n        \r\n        // Color gradient from red (5 health) to green (1 health)\r\n        const colors = [0x2ecc71, 0xf1c40f, 0xe67e22, 0xe74c3c, 0xc0392b]; // green, yellow, orange, red, dark red\r\n        const colorIndex = Math.max(0, this.health - 1);\r\n        const color = colors[colorIndex];\r\n        \r\n        this.graphics.beginFill(color);\r\n        this.graphics.drawRoundedRect(0, 0, this.width, this.height, 3);\r\n        this.graphics.endFill();\r\n        \r\n        // Add outer border\r\n        this.graphics.lineStyle(1, 0xffffff, 0.3);\r\n        this.graphics.drawRoundedRect(0, 0, this.width, this.height, 3);\r\n        \r\n        // Add inner stroke for depth\r\n        this.graphics.lineStyle(1, 0xffffff, 0.6);\r\n        this.graphics.drawRoundedRect(2, 2, this.width - 4, this.height - 4, 2);\r\n        \r\n        this.container.addChild(this.graphics);\r\n    }\r\n\r\n    setPosition(x: number, y: number): void {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.container.x = x;\r\n        this.container.y = y;\r\n    }\r\n\r\n    hit(): boolean {\r\n        this.health--;\r\n        this.updateGraphics();\r\n        return this.health <= 0;\r\n    }\r\n\r\n    getBounds() {\r\n        return {\r\n            left: this.x,\r\n            right: this.x + this.width,\r\n            top: this.y,\r\n            bottom: this.y + this.height\r\n        };\r\n    }\r\n\r\n    getColor(): number {\r\n        // Color gradient from red (5 health) to green (1 health)\r\n        const colors = [0x2ecc71, 0xf1c40f, 0xe67e22, 0xe74c3c, 0xc0392b]; // green, yellow, orange, red, dark red\r\n        const colorIndex = Math.max(0, this.health - 1);\r\n        return colors[colorIndex];\r\n    }\r\n} ","import { Container, Graphics, Text, TextStyle } from 'pixi.js';\r\n\r\nexport enum PowerUpType {\r\n    PADDLE_INCREASE = 'paddle_increase',\r\n    PADDLE_DECREASE = 'paddle_decrease',\r\n    EXTRA_LIFE = 'extra_life'\r\n}\r\n\r\nexport class PowerUp {\r\n    public container: Container;\r\n    public x: number = 0;\r\n    public y: number = 0;\r\n    public type: PowerUpType;\r\n    private width: number = 30;\r\n    private height: number = 30;\r\n    private velocityY: number = 2;\r\n    private graphics!: Graphics;\r\n    private text!: Text;\r\n\r\n    constructor(type: PowerUpType, x: number, y: number) {\r\n        this.type = type;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.container = new Container();\r\n        \r\n        this.createGraphics();\r\n        this.setPosition(x, y);\r\n    }\r\n\r\n    private createGraphics(): void {\r\n        // Create background\r\n        this.graphics = new Graphics();\r\n        \r\n        // Color based on power-up type\r\n        let color: number;\r\n        let symbol: string;\r\n        \r\n        switch (this.type) {\r\n            case PowerUpType.PADDLE_INCREASE:\r\n                color = 0x2ecc71; // Green\r\n                symbol = '+';\r\n                break;\r\n            case PowerUpType.PADDLE_DECREASE:\r\n                color = 0xe74c3c; // Red\r\n                symbol = '-';\r\n                break;\r\n            case PowerUpType.EXTRA_LIFE:\r\n                color = 0xf39c12; // Orange\r\n                symbol = 'â™¥';\r\n                break;\r\n        }\r\n        \r\n        this.graphics.beginFill(color);\r\n        this.graphics.drawRoundedRect(0, 0, this.width, this.height, 5);\r\n        this.graphics.endFill();\r\n        \r\n        // Add border\r\n        this.graphics.lineStyle(2, 0xffffff, 0.8);\r\n        this.graphics.drawRoundedRect(0, 0, this.width, this.height, 5);\r\n        \r\n        // Create text\r\n        const textStyle = new TextStyle({\r\n            fontFamily: 'Arial',\r\n            fontSize: 16,\r\n            fontWeight: 'bold',\r\n            fill: 0xffffff,\r\n            stroke: 0x000000,\r\n            strokeThickness: 2\r\n        });\r\n        \r\n        this.text = new Text(symbol, textStyle);\r\n        this.text.anchor.set(0.5);\r\n        this.text.x = this.width / 2;\r\n        this.text.y = this.height / 2;\r\n        \r\n        this.container.addChild(this.graphics);\r\n        this.container.addChild(this.text);\r\n    }\r\n\r\n    setPosition(x: number, y: number): void {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.container.x = x;\r\n        this.container.y = y;\r\n    }\r\n\r\n    update(): void {\r\n        this.y += this.velocityY;\r\n        this.container.y = this.y;\r\n    }\r\n\r\n    getBounds() {\r\n        return {\r\n            left: this.x,\r\n            right: this.x + this.width,\r\n            top: this.y,\r\n            bottom: this.y + this.height\r\n        };\r\n    }\r\n\r\n    isOutOfBounds(gameHeight: number): boolean {\r\n        return this.y > gameHeight;\r\n    }\r\n} ","import { Container, Graphics } from 'pixi.js';\r\n\r\nexport class Particle {\r\n    public container: Container;\r\n    private graphics: Graphics;\r\n    private velocityX: number;\r\n    private velocityY: number;\r\n    private life: number;\r\n    private maxLife: number;\r\n    private gravity: number = 0.3;\r\n    private friction: number = 0.98;\r\n\r\n    constructor(x: number, y: number, color: number) {\r\n        this.container = new Container();\r\n        this.container.position.set(x, y);\r\n        \r\n        // Create particle graphics\r\n        this.graphics = new Graphics();\r\n        this.graphics.beginFill(color);\r\n        this.graphics.drawCircle(0, 0, Math.random() * 3 + 1);\r\n        this.graphics.endFill();\r\n        this.container.addChild(this.graphics);\r\n        \r\n        // Random velocity\r\n        this.velocityX = (Math.random() - 0.5) * 8;\r\n        this.velocityY = (Math.random() - 0.5) * 8 - 2; // Slight upward bias\r\n        \r\n        // Life span\r\n        this.maxLife = Math.random() * 60 + 30; // 30-90 frames\r\n        this.life = this.maxLife;\r\n    }\r\n\r\n    update(): boolean {\r\n        // Apply gravity and friction\r\n        this.velocityY += this.gravity;\r\n        this.velocityX *= this.friction;\r\n        this.velocityY *= this.friction;\r\n        \r\n        // Update position\r\n        this.container.x += this.velocityX;\r\n        this.container.y += this.velocityY;\r\n        \r\n        // Decrease life\r\n        this.life--;\r\n        \r\n        // Fade out based on life\r\n        const alpha = this.life / this.maxLife;\r\n        this.graphics.alpha = alpha;\r\n        \r\n        // Scale down as it fades\r\n        const scale = 0.5 + (alpha * 0.5);\r\n        this.graphics.scale.set(scale);\r\n        \r\n        // Return true if particle is still alive\r\n        return this.life > 0;\r\n    }\r\n\r\n    destroy(): void {\r\n        if (this.container.parent) {\r\n            this.container.parent.removeChild(this.container);\r\n        }\r\n    }\r\n}\r\n\r\nexport class ParticleSystem {\r\n    private particles: Particle[] = [];\r\n    private container: Container;\r\n\r\n    constructor(container: Container) {\r\n        this.container = container;\r\n    }\r\n\r\n    createExplosion(x: number, y: number, color: number, count: number = 8): void {\r\n        for (let i = 0; i < count; i++) {\r\n            const particle = new Particle(x, y, color);\r\n            this.particles.push(particle);\r\n            this.container.addChild(particle.container);\r\n        }\r\n    }\r\n\r\n    update(): void {\r\n        // Update all particles and remove dead ones\r\n        for (let i = this.particles.length - 1; i >= 0; i--) {\r\n            const particle = this.particles[i];\r\n            const isAlive = particle.update();\r\n            \r\n            if (!isAlive) {\r\n                particle.destroy();\r\n                this.particles.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    clear(): void {\r\n        this.particles.forEach(particle => particle.destroy());\r\n        this.particles = [];\r\n    }\r\n} ","import { Application, Container, Graphics, Text, TextStyle } from 'pixi.js';\r\nimport { Paddle } from './paddle';\r\nimport { Ball } from './ball';\r\nimport { Brick } from './brick';\r\nimport { PowerUp, PowerUpType } from './powerup';\r\nimport { ParticleSystem } from './particle';\r\n\r\n// Game constants - fixed base dimensions\r\nconst BASE_GAME_WIDTH = 900;\r\nconst BASE_GAME_HEIGHT = 500;\r\nconst PADDLE_WIDTH = 100;\r\nconst PADDLE_HEIGHT = 20;\r\nconst BALL_RADIUS = 10;\r\nconst BRICK_HEIGHT = 30;\r\nconst BRICK_ROWS = 5;\r\nconst BRICK_COLS = 10;\r\nconst BRICK_PADDING = 1;\r\nconst INITIAL_BALL_VELOCITY = 8;\r\nconst POWERUP_DROP_CHANCE = 0.1; // 10% chance\r\n\r\n// Calculate brick width to fit perfectly\r\nconst BRICK_WIDTH = (BASE_GAME_WIDTH - (BRICK_COLS + 1) * BRICK_PADDING) / BRICK_COLS;\r\n\r\n// Responsive scaling function\r\nconst getGameDimensions = () => {\r\n    const windowWidth = window.innerWidth;\r\n    const windowHeight = window.innerHeight - 120; // Account for top bar and margins\r\n    \r\n    // Calculate scale to fit within available space while maintaining aspect ratio\r\n    const scaleX = windowWidth / BASE_GAME_WIDTH;\r\n    const scaleY = windowHeight / BASE_GAME_HEIGHT;\r\n    const scale = Math.min(scaleX, scaleY);\r\n    \r\n    return {\r\n        gameWidth: BASE_GAME_WIDTH,\r\n        gameHeight: BASE_GAME_HEIGHT,\r\n        scale\r\n    };\r\n};\r\n\r\nexport class BreakoutGame {\r\n    private app: Application;\r\n    private gameContainer: Container;\r\n    private paddle!: Paddle;\r\n    private ball!: Ball;\r\n    private bricks: Brick[] = [];\r\n    private powerUps: PowerUp[] = [];\r\n    private particleSystem: ParticleSystem;\r\n    private score: number = 0;\r\n    private lives: number = 3;\r\n    private level: number = 1;\r\n    private isGameOver: boolean = false;\r\n    private isPaused: boolean = false;\r\n    private isGameStarted: boolean = false;\r\n    private removeInputHandler?: () => void;\r\n    private currentPaddleWidth: number = PADDLE_WIDTH;\r\n    private safetyNetActive: boolean = false;\r\n    private safetyNet!: Graphics;\r\n\r\n    constructor(app: Application) {\r\n        this.app = app;\r\n        this.gameContainer = new Container();\r\n        this.app.stage.addChild(this.gameContainer);\r\n        this.particleSystem = new ParticleSystem(this.gameContainer);\r\n    }\r\n\r\n    async init(): Promise<void> {\r\n        // Create game background\r\n        this.createBackground();\r\n        \r\n        // Initialize paddle\r\n        this.paddle = new Paddle(PADDLE_WIDTH, PADDLE_HEIGHT);\r\n        this.gameContainer.addChild(this.paddle.container);\r\n        \r\n        // Initialize ball\r\n        this.ball = new Ball(BALL_RADIUS);\r\n        this.gameContainer.addChild(this.ball.container);\r\n        \r\n        // Create bricks\r\n        this.createBricks();\r\n        \r\n        // Set up input handling\r\n        this.setupInput();\r\n        \r\n        // Initialize UI\r\n        this.updateUI();\r\n        \r\n        // Position game objects at center\r\n        this.paddle.setPosition(BASE_GAME_WIDTH / 2 - this.currentPaddleWidth / 2, BASE_GAME_HEIGHT - PADDLE_HEIGHT - 10);\r\n        this.resetBall();\r\n    }\r\n\r\n    private createBackground(): void {\r\n        const background = new Graphics();\r\n        background.beginFill(0x34495e);\r\n        background.drawRect(0, 0, BASE_GAME_WIDTH, BASE_GAME_HEIGHT);\r\n        background.endFill();\r\n        \r\n        this.gameContainer.addChild(background);\r\n        \r\n        // Create safety net (initially hidden)\r\n        this.safetyNet = new Graphics();\r\n        this.safetyNet.beginFill(0x2ecc71, 0.7);\r\n        this.safetyNet.drawRect(0, BASE_GAME_HEIGHT - 5, BASE_GAME_WIDTH, 5);\r\n        this.safetyNet.endFill();\r\n        this.safetyNet.visible = false;\r\n        this.gameContainer.addChild(this.safetyNet);\r\n    }\r\n\r\n    private createBricks(): void {\r\n        const healths = [5, 4, 3, 2, 1]; // Red to green (top to bottom)\r\n        const startY = 50;\r\n        \r\n        for (let row = 0; row < BRICK_ROWS; row++) {\r\n            for (let col = 0; col < BRICK_COLS; col++) {\r\n                const x = col * (BRICK_WIDTH + BRICK_PADDING) + BRICK_PADDING;\r\n                const y = startY + row * (BRICK_HEIGHT + BRICK_PADDING);\r\n                \r\n                const brick = new Brick(BRICK_WIDTH, BRICK_HEIGHT, healths[row]);\r\n                brick.setPosition(x, y);\r\n                this.bricks.push(brick);\r\n                this.gameContainer.addChild(brick.container);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setupInput(): void {\r\n        const handleKeydown = (event: KeyboardEvent) => {\r\n            if (this.isGameOver) return;\r\n            \r\n            switch (event.key) {\r\n                case ' ':\r\n                    event.preventDefault();\r\n                    if (!this.isGameStarted) {\r\n                        this.startGame();\r\n                    } else {\r\n                        this.togglePause();\r\n                    }\r\n                    break;\r\n                case 'Escape':\r\n                    event.preventDefault();\r\n                    this.togglePause();\r\n                    break;\r\n                case 'ArrowLeft':\r\n                case 'a':\r\n                case 'A':\r\n                    event.preventDefault();\r\n                    if (!this.isPaused) {\r\n                        const newX = Math.max(0, this.paddle.x - 20);\r\n                        const paddleY = BASE_GAME_HEIGHT - PADDLE_HEIGHT - 10;\r\n                        this.paddle.setPosition(newX, paddleY);\r\n                    }\r\n                    break;\r\n                case 'ArrowRight':\r\n                case 'd':\r\n                case 'D':\r\n                    event.preventDefault();\r\n                    if (!this.isPaused) {\r\n                        const newX = Math.min(BASE_GAME_WIDTH - this.currentPaddleWidth, this.paddle.x + 20);\r\n                        const paddleY = BASE_GAME_HEIGHT - PADDLE_HEIGHT - 10;\r\n                        this.paddle.setPosition(newX, paddleY);\r\n                    }\r\n                    break;\r\n            }\r\n        };\r\n\r\n        const handleMouseMove = (event: Event) => {\r\n            if (this.isGameOver || this.isPaused) return;\r\n            \r\n            const mouseEvent = event as MouseEvent;\r\n            const canvas = this.app.view as HTMLCanvasElement;\r\n            const rect = canvas.getBoundingClientRect();\r\n            const mouseX = mouseEvent.clientX - rect.left;\r\n            \r\n            // Scale mouse position to game coordinates\r\n            const scaleX = BASE_GAME_WIDTH / rect.width;\r\n            const gameX = mouseX * scaleX;\r\n            \r\n            // Position paddle so mouse is at center of paddle\r\n            const paddleX = gameX - this.currentPaddleWidth / 2;\r\n            \r\n            // Keep paddle within bounds\r\n            const clampedX = Math.max(0, Math.min(BASE_GAME_WIDTH - this.currentPaddleWidth, paddleX));\r\n            \r\n            // Position paddle at bottom of visible canvas area\r\n            const paddleY = BASE_GAME_HEIGHT - PADDLE_HEIGHT - 10;\r\n            this.paddle.setPosition(clampedX, paddleY);\r\n        };\r\n\r\n        const handleMouseClick = (event: Event) => {\r\n            if (this.isGameOver || this.isPaused) return;\r\n            \r\n            if (!this.isGameStarted) {\r\n                this.startGame();\r\n            }\r\n        };\r\n\r\n        // Touch handling for mobile\r\n        let isDragging = false;\r\n        \r\n        const handleTouchStart = (event: TouchEvent) => {\r\n            if (this.isGameOver || this.isPaused) return;\r\n            \r\n            isDragging = true;\r\n            event.preventDefault();\r\n            \r\n            if (!this.isGameStarted) {\r\n                this.startGame();\r\n            }\r\n        };\r\n\r\n        const handleTouchMove = (event: TouchEvent) => {\r\n            if (!isDragging || this.isGameOver || this.isPaused) return;\r\n            \r\n            event.preventDefault();\r\n            \r\n            const touch = event.touches[0];\r\n            const canvas = this.app.view as HTMLCanvasElement;\r\n            const rect = canvas.getBoundingClientRect();\r\n            const touchX = touch.clientX - rect.left;\r\n            \r\n            // Scale touch position to game coordinates\r\n            const scaleX = BASE_GAME_WIDTH / rect.width;\r\n            const gameX = touchX * scaleX;\r\n            \r\n            // Position paddle so touch point is at center of paddle\r\n            const paddleX = gameX - this.currentPaddleWidth / 2;\r\n            \r\n            // Keep paddle within bounds\r\n            const clampedX = Math.max(0, Math.min(BASE_GAME_WIDTH - this.currentPaddleWidth, paddleX));\r\n            const paddleY = BASE_GAME_HEIGHT - PADDLE_HEIGHT - 10;\r\n            this.paddle.setPosition(clampedX, paddleY);\r\n        };\r\n\r\n        const handleTouchEnd = (event: TouchEvent) => {\r\n            isDragging = false;\r\n        };\r\n\r\n        document.addEventListener('keydown', handleKeydown);\r\n        const canvas = this.app.view as HTMLCanvasElement;\r\n        canvas.addEventListener('mousemove', handleMouseMove);\r\n        canvas.addEventListener('click', handleMouseClick);\r\n        canvas.addEventListener('touchstart', handleTouchStart, { passive: false });\r\n        canvas.addEventListener('touchmove', handleTouchMove, { passive: false });\r\n        canvas.addEventListener('touchend', handleTouchEnd, { passive: false });\r\n        \r\n        // Store the handler so we can remove it later\r\n        this.removeInputHandler = () => {\r\n            document.removeEventListener('keydown', handleKeydown);\r\n            canvas.removeEventListener('mousemove', handleMouseMove);\r\n            canvas.removeEventListener('click', handleMouseClick);\r\n            canvas.removeEventListener('touchstart', handleTouchStart);\r\n            canvas.removeEventListener('touchmove', handleTouchMove);\r\n            canvas.removeEventListener('touchend', handleTouchEnd);\r\n        };\r\n    }\r\n\r\n    private startGame(): void {\r\n        this.isGameStarted = true;\r\n        this.ball.setVelocity(0, -INITIAL_BALL_VELOCITY);\r\n    }\r\n\r\n    private resetBall(): void {\r\n        this.ball.setPosition(BASE_GAME_WIDTH / 2, BASE_GAME_HEIGHT - PADDLE_HEIGHT - 30);\r\n        this.ball.setVelocity(0, 0);\r\n        this.isGameStarted = false;\r\n    }\r\n\r\n    update(delta: number): void {\r\n        if (this.isGameOver || this.isPaused) return;\r\n\r\n        if (this.isGameStarted) {\r\n            this.ball.update();\r\n            this.checkCollisions();\r\n        } else {\r\n            // Ball follows paddle when not started\r\n            this.ball.setPosition(\r\n                this.paddle.x + this.currentPaddleWidth / 2,\r\n                BASE_GAME_HEIGHT - PADDLE_HEIGHT - 30\r\n            );\r\n        }\r\n        \r\n        // Update power-ups\r\n        this.updatePowerUps();\r\n        \r\n        // Update particles\r\n        this.particleSystem.update();\r\n    }\r\n\r\n    private checkCollisions(): void {\r\n        const ballBounds = this.ball.getBounds();\r\n        \r\n        // Check wall collisions with improved bounds checking\r\n        if (ballBounds.left <= 0) {\r\n            this.ball.setPosition(this.ball.radius, this.ball.y);\r\n            this.ball.reverseX();\r\n        } else if (ballBounds.right >= BASE_GAME_WIDTH) {\r\n            this.ball.setPosition(BASE_GAME_WIDTH - this.ball.radius, this.ball.y);\r\n            this.ball.reverseX();\r\n        }\r\n        \r\n        if (ballBounds.top <= 0) {\r\n            this.ball.setPosition(this.ball.x, this.ball.radius);\r\n            this.ball.reverseY();\r\n        }\r\n        \r\n        // Check if ball is out of bounds (bottom)\r\n        if (ballBounds.top >= BASE_GAME_HEIGHT) {\r\n            if (this.safetyNetActive) {\r\n                // Safety net catches the ball\r\n                this.ball.setPosition(this.ball.x, BASE_GAME_HEIGHT - this.ball.radius - 5);\r\n                this.ball.reverseY();\r\n                this.safetyNetActive = false;\r\n                this.safetyNet.visible = false;\r\n            } else {\r\n                // No safety net, lose a life\r\n                this.loseLife();\r\n            }\r\n            return;\r\n        }\r\n        \r\n        // Check paddle collision\r\n        if (this.ball.checkCollisionWithPaddle(this.paddle)) {\r\n            // Ensure ball is above paddle before reversing\r\n            if (this.ball.y > this.paddle.y) {\r\n                this.ball.setPosition(this.ball.x, this.paddle.y - this.ball.radius);\r\n                this.ball.reverseY();\r\n                \r\n                // Calculate where the ball hit the paddle (0 = left edge, 1 = right edge)\r\n                const hitPoint = (this.ball.x - this.paddle.x) / this.currentPaddleWidth;\r\n                const centerPoint = 0.5;\r\n                \r\n                // Calculate velocity multiplier based on distance from center\r\n                // Center (0.5) = 100% speed, edges (0 or 1) = 200% speed\r\n                const distanceFromCenter = Math.abs(hitPoint - centerPoint);\r\n                const velocityMultiplier = 1 + distanceFromCenter; // 1.0 to 2.0\r\n                \r\n                // Set new velocity with angle and speed adjustment\r\n                const newSpeed = INITIAL_BALL_VELOCITY * velocityMultiplier;\r\n                const angle = (hitPoint - centerPoint) * 0.8; // -0.4 to 0.4 radians\r\n                \r\n                this.ball.setVelocityAndAngle(newSpeed, angle);\r\n            }\r\n        }\r\n        \r\n        // Check brick collisions\r\n        for (let i = this.bricks.length - 1; i >= 0; i--) {\r\n            const brick = this.bricks[i];\r\n            if (this.ball.checkCollisionWithBrick(brick)) {\r\n                // Determine which side of the brick was hit\r\n                const ballBounds = this.ball.getBounds();\r\n                const brickBounds = brick.getBounds();\r\n                \r\n                // Calculate overlap on each axis\r\n                const overlapX = Math.min(ballBounds.right - brickBounds.left, brickBounds.right - ballBounds.left);\r\n                const overlapY = Math.min(ballBounds.bottom - brickBounds.top, brickBounds.bottom - ballBounds.top);\r\n                \r\n                // Bounce based on which overlap is smaller (indicating which side was hit)\r\n                if (overlapX < overlapY) {\r\n                    // Hit from left or right side\r\n\r\n                    this.ball.reverseX();\r\n                } else {\r\n                    // Hit from top or bottom side\r\n\r\n                    this.ball.reverseY();\r\n                }\r\n                \r\n                // Hit the brick and check if it's destroyed\r\n                const isDestroyed = brick.hit();\r\n                if (isDestroyed) {\r\n                    // Create particle explosion at brick position\r\n                    const brickColor = brick.getColor();\r\n                    this.particleSystem.createExplosion(\r\n                        brick.x + BRICK_WIDTH / 2, \r\n                        brick.y + BRICK_HEIGHT / 2, \r\n                        brickColor, \r\n                        12\r\n                    );\r\n                    \r\n                    // Remove the brick if health reaches 0\r\n                    this.bricks.splice(i, 1);\r\n                    this.gameContainer.removeChild(brick.container);\r\n                    \r\n                    // Chance to spawn power-up\r\n                    if (Math.random() < POWERUP_DROP_CHANCE) {\r\n                        this.spawnPowerUp(brick.x + BRICK_WIDTH / 2, brick.y + BRICK_HEIGHT);\r\n                    }\r\n                }\r\n                \r\n                this.score += 10;\r\n                this.updateUI();\r\n                \r\n                // Check if all bricks are destroyed\r\n                if (this.bricks.length === 0) {\r\n                    this.nextLevel();\r\n                }\r\n                \r\n                // Only destroy one brick per collision\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    private loseLife(): void {\r\n        this.lives--;\r\n        this.updateUI();\r\n        \r\n        // Reset paddle to original size\r\n        this.currentPaddleWidth = PADDLE_WIDTH;\r\n        this.paddle.resize(this.currentPaddleWidth);\r\n        \r\n        if (this.lives <= 0) {\r\n            this.gameOver();\r\n        } else {\r\n            this.resetBall();\r\n        }\r\n    }\r\n\r\n    private nextLevel(): void {\r\n        this.level++;\r\n        this.updateUI();\r\n        this.createBricks();\r\n        this.resetBall();\r\n    }\r\n\r\n    private gameOver(): void {\r\n        this.isGameOver = true;\r\n        this.showGameOver();\r\n    }\r\n\r\n    private showGameOver(): void {\r\n        const gameOverElement = document.getElementById('gameOver');\r\n        const finalScoreElement = document.getElementById('finalScore');\r\n        \r\n        if (gameOverElement && finalScoreElement) {\r\n            finalScoreElement.textContent = this.score.toString();\r\n            gameOverElement.style.display = 'block';\r\n        }\r\n    }\r\n\r\n    togglePause(): void {\r\n        this.isPaused = !this.isPaused;\r\n        \r\n        if (this.isPaused) {\r\n            this.showPauseMenu();\r\n        } else {\r\n            this.hidePauseMenu();\r\n        }\r\n    }\r\n\r\n    private showPauseMenu(): void {\r\n        const pauseMenuElement = document.getElementById('pauseMenu');\r\n        if (pauseMenuElement) {\r\n            pauseMenuElement.style.display = 'block';\r\n        }\r\n    }\r\n\r\n    private hidePauseMenu(): void {\r\n        const pauseMenuElement = document.getElementById('pauseMenu');\r\n        if (pauseMenuElement) {\r\n            pauseMenuElement.style.display = 'none';\r\n        }\r\n    }\r\n\r\n    private updateUI(): void {\r\n        const scoreElement = document.getElementById('score');\r\n        const livesElement = document.getElementById('lives');\r\n        const levelElement = document.getElementById('level');\r\n        \r\n        if (scoreElement) scoreElement.textContent = this.score.toString();\r\n        if (livesElement) livesElement.textContent = this.lives.toString();\r\n        if (levelElement) levelElement.textContent = this.level.toString();\r\n    }\r\n\r\n    restart(): void {\r\n        this.score = 0;\r\n        this.lives = 3;\r\n        this.level = 1;\r\n        this.isGameOver = false;\r\n        this.isPaused = false;\r\n        this.isGameStarted = false;\r\n        this.currentPaddleWidth = PADDLE_WIDTH;\r\n        this.safetyNetActive = false;\r\n        this.safetyNet.visible = false;\r\n        \r\n        // Clear particles\r\n        this.particleSystem.clear();\r\n        \r\n        // Clear existing bricks\r\n        this.bricks.forEach(brick => {\r\n            this.gameContainer.removeChild(brick.container);\r\n        });\r\n        this.bricks = [];\r\n        \r\n        // Clear existing power-ups\r\n        this.powerUps.forEach(powerUp => {\r\n            this.gameContainer.removeChild(powerUp.container);\r\n        });\r\n        this.powerUps = [];\r\n        \r\n        // Create new bricks\r\n        this.createBricks();\r\n        \r\n        // Reset ball and paddle\r\n        this.resetBall();\r\n        this.paddle.setPosition(BASE_GAME_WIDTH / 2 - this.currentPaddleWidth / 2, BASE_GAME_HEIGHT - PADDLE_HEIGHT - 10);\r\n        this.paddle.resize(this.currentPaddleWidth);\r\n        \r\n        this.updateUI();\r\n        \r\n        // Hide modals\r\n        const gameOverElement = document.getElementById('gameOver');\r\n        if (gameOverElement) {\r\n            gameOverElement.style.display = 'none';\r\n        }\r\n        this.hidePauseMenu();\r\n    }\r\n\r\n    resume(): void {\r\n        this.isPaused = false;\r\n        this.hidePauseMenu();\r\n    }\r\n\r\n    destroy(): void {\r\n        if (this.removeInputHandler) {\r\n            this.removeInputHandler();\r\n        }\r\n        this.particleSystem.clear();\r\n        if (this.gameContainer && this.gameContainer.parent) {\r\n            this.gameContainer.parent.removeChild(this.gameContainer);\r\n        }\r\n    }\r\n\r\n    private spawnPowerUp(x: number, y: number): void {\r\n        // Randomly choose power-up type\r\n        const powerUpTypes = [PowerUpType.PADDLE_INCREASE, PowerUpType.PADDLE_DECREASE, PowerUpType.EXTRA_LIFE];\r\n        const randomType = powerUpTypes[Math.floor(Math.random() * powerUpTypes.length)];\r\n        \r\n        const powerUp = new PowerUp(randomType, x, y);\r\n        this.powerUps.push(powerUp);\r\n        this.gameContainer.addChild(powerUp.container);\r\n    }\r\n\r\n    private updatePowerUps(): void {\r\n        for (let i = this.powerUps.length - 1; i >= 0; i--) {\r\n            const powerUp = this.powerUps[i];\r\n            powerUp.update();\r\n            \r\n            // Check if power-up is out of bounds\r\n            if (powerUp.isOutOfBounds(BASE_GAME_HEIGHT)) {\r\n                this.powerUps.splice(i, 1);\r\n                this.gameContainer.removeChild(powerUp.container);\r\n                continue;\r\n            }\r\n            \r\n            // Check collision with paddle\r\n            if (this.checkPowerUpCollision(powerUp)) {\r\n                this.applyPowerUp(powerUp.type);\r\n                this.powerUps.splice(i, 1);\r\n                this.gameContainer.removeChild(powerUp.container);\r\n            }\r\n        }\r\n    }\r\n\r\n    private checkPowerUpCollision(powerUp: PowerUp): boolean {\r\n        const powerUpBounds = powerUp.getBounds();\r\n        const paddleBounds = this.paddle.getBounds();\r\n        \r\n        return powerUpBounds.left < paddleBounds.right &&\r\n               powerUpBounds.right > paddleBounds.left &&\r\n               powerUpBounds.top < paddleBounds.bottom &&\r\n               powerUpBounds.bottom > paddleBounds.top;\r\n    }\r\n\r\n    private applyPowerUp(type: PowerUpType): void {\r\n        switch (type) {\r\n            case PowerUpType.PADDLE_INCREASE:\r\n                this.currentPaddleWidth = Math.min(this.currentPaddleWidth * 1.3, PADDLE_WIDTH * 2);\r\n                this.paddle.resize(this.currentPaddleWidth);\r\n                break;\r\n            case PowerUpType.PADDLE_DECREASE:\r\n                this.currentPaddleWidth = Math.max(this.currentPaddleWidth * 0.8, PADDLE_WIDTH * 0.5);\r\n                this.paddle.resize(this.currentPaddleWidth);\r\n                break;\r\n            case PowerUpType.EXTRA_LIFE:\r\n                // Activate safety net if not already active\r\n                if (!this.safetyNetActive) {\r\n                    this.safetyNetActive = true;\r\n                    this.safetyNet.visible = true;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\n// Global game instance\r\nlet game: BreakoutGame | null = null;\r\nlet app: Application | null = null;\r\n\r\n// Function to update canvas scaling on resize\r\nfunction updateCanvasScaling() {\r\n    if (!app) return;\r\n    \r\n    const dimensions = getGameDimensions();\r\n    const canvas = app.view as HTMLCanvasElement;\r\n    \r\n    // Update canvas CSS dimensions\r\n    canvas.style.width = `${BASE_GAME_WIDTH * dimensions.scale}px`;\r\n    canvas.style.height = `${BASE_GAME_HEIGHT * dimensions.scale}px`;\r\n    \r\n    console.log('Canvas resized:', {\r\n        scale: dimensions.scale,\r\n        scaledWidth: BASE_GAME_WIDTH * dimensions.scale,\r\n        scaledHeight: BASE_GAME_HEIGHT * dimensions.scale,\r\n        styleWidth: canvas.style.width,\r\n        styleHeight: canvas.style.height\r\n    });\r\n}\r\n\r\n// Initialize the game when the page loads\r\nasync function initGame() {\r\n    // Get dimensions and scale\r\n    const dimensions = getGameDimensions();\r\n    \r\n    // Create PIXI application with base dimensions\r\n    app = new Application({\r\n        width: BASE_GAME_WIDTH,\r\n        height: BASE_GAME_HEIGHT,\r\n        backgroundColor: 0x2c3e50,\r\n        antialias: true,\r\n        resolution: window.devicePixelRatio || 1,\r\n    });\r\n\r\n    // Add canvas to game container with proper scaling\r\n    const gameContainer = document.getElementById('gameContainer');\r\n    if (gameContainer) {\r\n        const canvas = app.view as HTMLCanvasElement;\r\n        \r\n        // Apply scaling through CSS transform\r\n        canvas.style.width = `${BASE_GAME_WIDTH * dimensions.scale}px`;\r\n        canvas.style.height = `${BASE_GAME_HEIGHT * dimensions.scale}px`;\r\n        canvas.style.maxWidth = '100%';\r\n        canvas.style.maxHeight = '100%';\r\n        canvas.style.objectFit = 'contain';\r\n        \r\n        gameContainer.appendChild(canvas);\r\n        \r\n        console.log('Breakout dimensions:', {\r\n            baseWidth: BASE_GAME_WIDTH,\r\n            baseHeight: BASE_GAME_HEIGHT,\r\n            scale: dimensions.scale,\r\n            scaledWidth: BASE_GAME_WIDTH * dimensions.scale,\r\n            scaledHeight: BASE_GAME_HEIGHT * dimensions.scale,\r\n            canvasWidth: canvas.width,\r\n            canvasHeight: canvas.height,\r\n            styleWidth: canvas.style.width,\r\n            styleHeight: canvas.style.height\r\n        });\r\n    }\r\n\r\n    // Create and initialize game\r\n    game = new BreakoutGame(app);\r\n    await game.init();\r\n\r\n    // Set up game loop\r\n    app.ticker.add(gameLoop);\r\n    \r\n    // Add resize handler\r\n    window.addEventListener('resize', updateCanvasScaling);\r\n}\r\n\r\nfunction gameLoop(delta: number) {\r\n    if (game) {\r\n        game.update(delta);\r\n    }\r\n}\r\n\r\n// Global functions for game control\r\ndeclare global {\r\n    interface Window {\r\n        restartGame: () => void;\r\n        returnToMainMenu: () => void;\r\n        resumeGame: () => void;\r\n        togglePause: () => void;\r\n    }\r\n}\r\n\r\nwindow.restartGame = () => {\r\n    if (game) {\r\n        game.restart();\r\n    }\r\n};\r\n\r\nwindow.returnToMainMenu = () => {\r\n    window.location.href = '/arcade/';\r\n};\r\n\r\nwindow.resumeGame = () => {\r\n    if (game) {\r\n        game.resume();\r\n    }\r\n};\r\n\r\nwindow.togglePause = () => {\r\n    if (game) {\r\n        game.togglePause();\r\n    }\r\n};\r\n\r\n// Initialize when page loads\r\nwindow.addEventListener('load', initGame); "],"names":["Paddle","width","height","__publicField","Container","Graphics","x","y","newWidth","Ball","radius","speed","angle","paddle","ballBounds","paddleBounds","brick","brickBounds","Brick","maxHealth","colors","colorIndex","color","PowerUpType","PowerUp","type","symbol","textStyle","TextStyle","Text","gameHeight","Particle","alpha","scale","ParticleSystem","container","count","i","particle","BASE_GAME_WIDTH","BASE_GAME_HEIGHT","PADDLE_WIDTH","PADDLE_HEIGHT","BALL_RADIUS","BRICK_HEIGHT","BRICK_ROWS","BRICK_COLS","BRICK_PADDING","INITIAL_BALL_VELOCITY","POWERUP_DROP_CHANCE","BRICK_WIDTH","getGameDimensions","windowWidth","windowHeight","scaleX","scaleY","BreakoutGame","app","background","healths","startY","row","col","handleKeydown","event","newX","paddleY","handleMouseMove","mouseEvent","rect","mouseX","paddleX","clampedX","handleMouseClick","isDragging","handleTouchStart","handleTouchMove","touch","touchX","handleTouchEnd","canvas","delta","hitPoint","centerPoint","velocityMultiplier","newSpeed","overlapX","overlapY","brickColor","gameOverElement","finalScoreElement","pauseMenuElement","scoreElement","livesElement","levelElement","powerUp","powerUpTypes","randomType","powerUpBounds","game","updateCanvasScaling","dimensions","initGame","Application","gameContainer","gameLoop"],"mappings":"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"}