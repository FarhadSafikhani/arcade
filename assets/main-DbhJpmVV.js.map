{"version":3,"file":"main-DbhJpmVV.js","sources":["../../src/config.ts","../../src/main.ts"],"sourcesContent":["// Game configuration interface\r\nexport interface GameConfig {\r\n    id: string;\r\n    name: string;\r\n    description: string;\r\n    icon: string;\r\n    color: string;\r\n    available: boolean;\r\n    entryPoint: string;\r\n}\r\n\r\nexport interface GamesConfig {\r\n    games: GameConfig[];\r\n}\r\n\r\n// Game configurations\r\nexport const gamesConfig: GamesConfig = {\r\n    games: [\r\n        {\r\n            id: \"snake\",\r\n            name: \"Snake\",\r\n            description: \"Classic snake game\",\r\n            icon: \"🐍\",\r\n            color: \"#2ecc71\",\r\n            available: true,\r\n            entryPoint: \"/games/snake/index.html\"\r\n        },\r\n        {\r\n            id: \"breakout\",\r\n            name: \"Breakout\",\r\n            description: \"Classic brick-breaking arcade game\",\r\n            icon: \"🎾\",\r\n            color: \"#f39c12\",\r\n            available: true,\r\n            entryPoint: \"/games/breakout/index.html\"\r\n        },\r\n        {\r\n            id: \"memory\",\r\n            name: \"Memory\",\r\n            description: \"Classic memory game\",\r\n            icon: \"👀\",\r\n            color: \"#2ecc71\",\r\n            available: true,\r\n            entryPoint: \"/games/memory/index.html\"\r\n        }\r\n    ]\r\n}; ","import { Application } from 'pixi.js';\r\nimport { gamesConfig, GameConfig } from './config';\r\n\r\n// Global functions for game control\r\ndeclare global {\r\n    interface Window {\r\n        startGame: (gameId: string) => void;\r\n        returnToMainMenu: () => void;\r\n    }\r\n}\r\n\r\nasync function init() {\r\n    try {\r\n        console.log('Initializing arcade collection...');\r\n        console.log('Games config:', gamesConfig);\r\n        \r\n        // Generate menu buttons using imported config\r\n        generateMenuButtons(gamesConfig.games);\r\n        \r\n        // Set up global functions\r\n        window.startGame = startGame;\r\n        window.returnToMainMenu = returnToMainMenu;\r\n        \r\n        console.log('Initialization complete');\r\n    } catch (error) {\r\n        console.error('Failed to initialize:', error);\r\n    }\r\n}\r\n\r\nfunction generateMenuButtons(games: GameConfig[]) {\r\n    console.log('Generating menu buttons for', games.length, 'games');\r\n    const gameGrid = document.getElementById('gameGrid');\r\n    console.log('Game grid element:', gameGrid);\r\n    \r\n    if (!gameGrid) {\r\n        console.error('Game grid element not found!');\r\n        return;\r\n    }\r\n    \r\n    gameGrid.innerHTML = '';\r\n    \r\n    games.forEach(game => {\r\n        console.log('Creating button for game:', game.name);\r\n        const button = document.createElement('div');\r\n        button.className = `game-button ${game.available ? '' : 'disabled'}`;\r\n        button.style.borderColor = game.available ? game.color : 'rgba(255, 255, 255, 0.3)';\r\n        \r\n        button.innerHTML = `\r\n            <span class=\"game-icon\">${game.icon} ${game.name}</span>\r\n            <div class=\"game-description\">${game.description}</div>\r\n        `;\r\n        \r\n        if (game.available) {\r\n            button.addEventListener('click', () => startGame(game.id));\r\n        }\r\n        \r\n        gameGrid.appendChild(button);\r\n    });\r\n    \r\n    console.log('Menu buttons generated successfully');\r\n}\r\n\r\nfunction startGame(gameId: string) {\r\n    // Navigate to the game page\r\n    window.location.href = `/arcade/games/${gameId}/index.html`;\r\n}\r\n\r\nfunction returnToMainMenu() {\r\n    // Navigate back to main menu\r\n    window.location.href = '/arcade/';\r\n}\r\n\r\n// Initialize when page loads\r\nwindow.addEventListener('load', init); "],"names":["gamesConfig","init","generateMenuButtons","startGame","returnToMainMenu","error","games","gameGrid","game","button","gameId"],"mappings":"6CAgBO,MAAMA,EAA2B,CACpC,MAAO,CACH,CACI,GAAI,QACJ,KAAM,QACN,YAAa,qBACb,KAAM,KACN,MAAO,UACP,UAAW,GACX,WAAY,yBAAA,EAEhB,CACI,GAAI,WACJ,KAAM,WACN,YAAa,qCACb,KAAM,KACN,MAAO,UACP,UAAW,GACX,WAAY,4BAAA,EAEhB,CACI,GAAI,SACJ,KAAM,SACN,YAAa,sBACb,KAAM,KACN,MAAO,UACP,UAAW,GACX,WAAY,0BAAA,CAChB,CAER,ECnCA,eAAeC,GAAO,CAClB,GAAI,CACA,QAAQ,IAAI,mCAAmC,EAC/C,QAAQ,IAAI,gBAAiBD,CAAW,EAGxCE,EAAoBF,EAAY,KAAK,EAGrC,OAAO,UAAYG,EACnB,OAAO,iBAAmBC,EAE1B,QAAQ,IAAI,yBAAyB,CAAA,OAChCC,EAAO,CACZ,QAAQ,MAAM,wBAAyBA,CAAK,CAAA,CAEpD,CAEA,SAASH,EAAoBI,EAAqB,CAC9C,QAAQ,IAAI,8BAA+BA,EAAM,OAAQ,OAAO,EAChE,MAAMC,EAAW,SAAS,eAAe,UAAU,EAGnD,GAFA,QAAQ,IAAI,qBAAsBA,CAAQ,EAEtC,CAACA,EAAU,CACX,QAAQ,MAAM,8BAA8B,EAC5C,MAAA,CAGJA,EAAS,UAAY,GAErBD,EAAM,QAAQE,GAAQ,CAClB,QAAQ,IAAI,4BAA6BA,EAAK,IAAI,EAClD,MAAMC,EAAS,SAAS,cAAc,KAAK,EAC3CA,EAAO,UAAY,eAAeD,EAAK,UAAY,GAAK,UAAU,GAClEC,EAAO,MAAM,YAAcD,EAAK,UAAYA,EAAK,MAAQ,2BAEzDC,EAAO,UAAY;AAAA,sCACWD,EAAK,IAAI,IAAIA,EAAK,IAAI;AAAA,4CAChBA,EAAK,WAAW;AAAA,UAGhDA,EAAK,WACLC,EAAO,iBAAiB,QAAS,IAAMN,EAAUK,EAAK,EAAE,CAAC,EAG7DD,EAAS,YAAYE,CAAM,CAAA,CAC9B,EAED,QAAQ,IAAI,qCAAqC,CACrD,CAEA,SAASN,EAAUO,EAAgB,CAE/B,OAAO,SAAS,KAAO,iBAAiBA,CAAM,aAClD,CAEA,SAASN,GAAmB,CAExB,OAAO,SAAS,KAAO,UAC3B,CAGA,OAAO,iBAAiB,OAAQH,CAAI"}